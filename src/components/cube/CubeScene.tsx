import { onMount, onCleanup, createSignal, createEffect, For } from "solid-js";
import { render } from "solid-js/web";
import { JSX } from "solid-js/jsx-runtime";
import * as THREE from "three";
import { CSS3DRenderer, CSS3DObject } from "three/examples/jsm/renderers/CSS3DRenderer.js";
import CubeFace from "./CubeFace";
import { useTodosFace } from "../../hooks/useTodosFace";
import HanddrawnProgressDisplay from "../progress/HanddrawnProgressDisplay";
import HanddrawnTaskDetail from "../task/HanddrawnTaskDetail";
import { runCowInterpreter } from "../../cowInterpreter";
import { cowPrograms } from "../../cowPrograms";
import styles from "./CubeScene.module.css";

export default function CubeScene(): JSX.Element {
  let containerRef: HTMLDivElement | undefined;
  let renderer: CSS3DRenderer;
  let scene: THREE.Scene;
  let camera: THREE.PerspectiveCamera;
  let cube: THREE.Group;
  let faceElements: HTMLDivElement[] = [];
  
  const [isRotating, setIsRotating] = createSignal(false);
  const [showProgress, setShowProgress] = createSignal(true);
  const [selectedTaskId, setSelectedTaskId] = createSignal<number | null>(null);
  
  // „Éï„É≠„Éº„ÉÜ„Ç£„É≥„Ç∞„Éú„Çø„É≥Áî®„ÅÆÁä∂ÊÖã
  const [showInput, setShowInput] = createSignal(false);
  const [newItem, setNewItem] = createSignal<string>("");
  const [newItemDetail, setNewItemDetail] = createSignal<string>("");
  const [error, setError] = createSignal<string>("");

  // TodoÁÆ°ÁêÜ„Éï„ÉÉ„ÇØ
  const {
    allItems,
    getItemsByFace,
    loading,
    fetchData,
    addItem,
    toggleItem,
    deleteItem,
  } = useTodosFace();

  // ÈÄ≤ÊçóË®àÁÆó
  const totalTasks = () => allItems().length;
  const completedTasks = () => allItems().filter((item) => item.completed).length;

  // ÈÅ∏Êäû„Åï„Çå„Åü„Çø„Çπ„ÇØ„ÇíÂèñÂæó
  const selectedTask = () => {
    const taskId = selectedTaskId();
    return taskId ? allItems().find((item) => item.id === taskId) || null : null;
  };

  // CubeFaceÁî®„ÅÆÊã°Âºµ„Åï„Çå„Åü„Éè„É≥„Éâ„É©„Éº
  const handleTaskClick = (taskId: number) => {
    setSelectedTaskId(taskId);
  };

  // „Çø„Çπ„ÇØËøΩÂä†Âá¶ÁêÜ
  const handleAddTask = async () => {
    const result = runCowInterpreter(cowPrograms, newItem());

    if (!newItem().trim()) {
      setError("„Çø„Çπ„ÇØÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ");
      setTimeout(() => setError(""), 3000);
      return;
    }

    // API„ÇíÈÄö„Åò„Å¶„Ç¢„Ç§„ÉÜ„É†„ÇíËøΩÂä†Ôºà„Éö„Éº„Ç∏„ÅØËá™ÂãïÂà§ÂÆöÔºâ
    await addItem(newItem(), newItemDetail());
    
    // „Éï„Ç©„Éº„É†„Çí„É™„Çª„ÉÉ„Éà
    setNewItem("");
    setNewItemDetail("");
    setShowInput(false);
    setError("");
  };

  // „Ç≠„Éº„Éú„Éº„Éâ„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
  const handleKeyDown = (e: KeyboardEvent) => {
    if (e.key === "Enter" && (e.metaKey || e.ctrlKey)) {
      e.preventDefault();
      handleAddTask();
    }
  };

  // Á´ãÊñπ‰Ωì„ÅÆÈù¢„ÅÆ„É©„Éô„É´
  const faceLabels = [
    "1", // ÂâçÈù¢
    "2", // Âè≥Èù¢  
    "3", // ÂæåÈù¢
    "4", // Â∑¶Èù¢
    "5", // ‰∏äÈù¢
    "6", // ‰∏ãÈù¢
  ];



  onMount(() => {
    if (!containerRef) return;

    // „Ç∑„Éº„É≥„ÅÆÂàùÊúüÂåñ
    scene = new THREE.Scene();
    camera = new THREE.PerspectiveCamera(
      40,
      window.innerWidth / window.innerHeight,
      1,
      10000
    );
    camera.position.set(0, 0, 1500);

    // CSS3D„É¨„É≥„ÉÄ„É©„Éº„ÅÆË®≠ÂÆö
    renderer = new CSS3DRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    containerRef.appendChild(renderer.domElement);

    // Á´ãÊñπ‰Ωì„Ç∞„É´„Éº„Éó„ÅÆ‰ΩúÊàê
    cube = new THREE.Group();
    scene.add(cube);

    // ÂêÑÈù¢„Å´CubeFace„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÈÖçÁΩÆ
    createCubeFaces();

    // ÂàùÊúü„Éá„Éº„Çø„ÅÆÂèñÂæó
    fetchData();

    // „É¨„É≥„ÉÄ„É™„É≥„Ç∞„É´„Éº„Éó
    animate();

    // „Ç¶„Ç£„É≥„Éâ„Ç¶„É™„Çµ„Ç§„Ç∫ÂØæÂøú
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener("resize", handleResize);

    // „Éû„Ç¶„Çπ„Éâ„É©„ÉÉ„Ç∞Êìç‰Ωú
    let isDragging = false;
    let previousMousePosition = { x: 0, y: 0 };

    const handleMouseDown = (event: MouseEvent) => {
      // „Ç≥„Éû„É≥„Éâ„Ç≠„Éº„ÅåÊäº„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÁ´ãÊñπ‰Ωì„ÅÆÂõûËª¢„ÇíÁÑ°Âäπ„Å´„Åô„Çã
      if (isRotating() || event.metaKey || event.ctrlKey) return;
      isDragging = true;
      previousMousePosition = { x: event.clientX, y: event.clientY };
      renderer.domElement.style.cursor = 'grabbing';
    };

    const handleMouseMove = (event: MouseEvent) => {
      // „Ç≥„Éû„É≥„Éâ„Ç≠„Éº„ÅåÊäº„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÁ´ãÊñπ‰Ωì„ÅÆÂõûËª¢„ÇíÁÑ°Âäπ„Å´„Åô„Çã
      if (!isDragging || isRotating() || event.metaKey || event.ctrlKey) return;

      const deltaX = event.clientX - previousMousePosition.x;
      const deltaY = event.clientY - previousMousePosition.y;
      
      // „Éâ„É©„ÉÉ„Ç∞„ÅÆÊÑüÂ∫¶„ÇíË™øÊï¥
      const sensitivity = 0.005;
      
      // YËª∏ÂõûËª¢ÔºàÊ∞¥Âπ≥„Éâ„É©„ÉÉ„Ç∞Ôºâ
      cube.rotation.y += deltaX * sensitivity;
      
      // XËª∏ÂõûËª¢ÔºàÂûÇÁõ¥„Éâ„É©„ÉÉ„Ç∞Ôºâ
      cube.rotation.x += deltaY * sensitivity;
      
      // XËª∏ÂõûËª¢„ÇíÂà∂ÈôêÔºàÁ´ãÊñπ‰Ωì„ÅåÂÆåÂÖ®„Å´‰∏ä‰∏ãÈÄÜ„Åï„Åæ„Å´„Å™„Çâ„Å™„ÅÑ„Çà„ÅÜ„Å´Ôºâ
      cube.rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, cube.rotation.x));

      previousMousePosition = { x: event.clientX, y: event.clientY };
    };

    const handleMouseUp = () => {
      isDragging = false;
      renderer.domElement.style.cursor = 'grab';
    };

    // „Éû„Ç¶„Çπ„Ç§„Éô„É≥„Éà„Çírenderer.domElement„Å´ËøΩÂä†
    renderer.domElement.addEventListener("mousedown", handleMouseDown);
    window.addEventListener("mousemove", handleMouseMove);
    window.addEventListener("mouseup", handleMouseUp);
    
    // ÂàùÊúü„Ç´„Éº„ÇΩ„É´„Çπ„Çø„Ç§„É´
    renderer.domElement.style.cursor = 'grab';

    onCleanup(() => {
      window.removeEventListener("resize", handleResize);
      window.removeEventListener("mousemove", handleMouseMove);
      window.removeEventListener("mouseup", handleMouseUp);
      if (renderer?.domElement) {
        renderer.domElement.removeEventListener("mousedown", handleMouseDown);
      }
      if (containerRef && renderer?.domElement) {
        containerRef.removeChild(renderer.domElement);
      }
    });
  });

  const createCubeFaces = () => {
    const faceSize = 600;
    const halfSize = faceSize / 2;
    const positions = [
      [0, 0, halfSize],        // ÂâçÈù¢
      [halfSize, 0, 0],        // Âè≥Èù¢
      [0, 0, -halfSize],       // ÂæåÈù¢
      [-halfSize, 0, 0],       // Â∑¶Èù¢
      [0, halfSize, 0],        // ‰∏äÈù¢
      [0, -halfSize, 0],       // ‰∏ãÈù¢
    ];

    const rotations = [
      [0, 0, 0],                   // ÂâçÈù¢
      [0, Math.PI / 2, 0],         // Âè≥Èù¢
      [0, Math.PI, 0],             // ÂæåÈù¢
      [0, -Math.PI / 2, 0],        // Â∑¶Èù¢
      [Math.PI / 2, 0, 0],         // ‰∏äÈù¢
      [-Math.PI / 2, 0, 0],        // ‰∏ãÈù¢
    ];

    positions.forEach((position, index) => {
      // DOM„Ç®„É¨„É°„É≥„Éà„ÅÆ‰ΩúÊàê
      const element = document.createElement("div");
      element.style.width = "600px";
      element.style.height = "600px";
      element.id = `cube-face-${index}`;

      // SolidJS„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Çí„Éû„Ç¶„É≥„Éà
      render(() => (
        <CubeFace
          faceId={index}
          faceLabel={faceLabels[index]}
          items={getItemsByFace(index)}
          loading={loading()}
          onToggleItem={toggleItem}
          onDeleteItem={deleteItem}
          onTaskClick={handleTaskClick}
        />
      ), element);

      // CSS3D„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆ‰ΩúÊàê
      const object = new CSS3DObject(element);
      object.position.set(position[0], position[1], position[2]);
      object.rotation.set(rotations[index][0], rotations[index][1], rotations[index][2]);
      
      cube.add(object);
      faceElements[index] = element;
    });
  };



  const animate = () => {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
  };

  return (
    <div class={styles.cubeContainer}>
      <div ref={containerRef} class={styles.threeContainer}></div>
      
      {/* ÈÄ≤ÊçóË°®Á§∫ */}
      {showProgress() && (
        <div
          style={{
            position: "fixed",
            left: "20px",
            top: "20px",
            "z-index": 1000,
            background: "rgba(255, 251, 231, 0.95)",
            "border-radius": "12px",
            padding: "10px",
            "box-shadow": "0 4px 12px rgba(0, 0, 0, 0.15)",
          }}
        >
          <HanddrawnProgressDisplay
            totalTasks={totalTasks()}
            completedTasks={completedTasks()}
            onClose={() => setShowProgress(false)}
          />
        </div>
      )}

      {/* ÈÄ≤ÊçóË°®Á§∫„Éà„Ç∞„É´„Éú„Çø„É≥ */}
      {!showProgress() && (
        <button
          style={{
            position: "fixed",
            top: "20px",
            left: "20px",
            background: "#e67e22",
            color: "white",
            border: "none",
            "border-radius": "8px",
            padding: "8px 12px",
            cursor: "pointer",
            "z-index": 1000,
            "font-weight": "bold",
          }}
          onClick={() => setShowProgress(true)}
          title="ÈÄ≤ÊçóË°®Á§∫„ÇíÈñã„Åè"
        >
          üìä ÈÄ≤Êçó
        </button>
      )}
      


      {/* „Çø„Çπ„ÇØË©≥Á¥∞Ë°®Á§∫ */}
      {selectedTask() && (
        <HanddrawnTaskDetail
          id={selectedTask()!.id}
          name={selectedTask()!.title}
          detail={selectedTask()!.description}
          completed={selectedTask()!.completed}
          priority="medium"
          onClose={() => setSelectedTaskId(null)}
        />
      )}

      {/* „Éï„É≠„Éº„ÉÜ„Ç£„É≥„Ç∞„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
      {!showInput() && (
        <button 
          class={`${styles.fab} ${styles.globalFab}`}
          onClick={() => setShowInput(true)}
          title="Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíËøΩÂä†"
        >
          +
        </button>
      )}

      {/* „Çø„Çπ„ÇØËøΩÂä†„Éï„Ç©„Éº„É† */}
      {showInput() && (
        <div class={styles.fabInputOverlay} onClick={() => setShowInput(false)}>
          <div
            class={styles.fabInputPopup}
            onClick={(e) => e.stopPropagation()}
          >
            <input
              type="text"
              placeholder="„Çø„Çπ„ÇØ„ÇíÂÖ•Âäõ..."
              value={newItem()}
              onInput={(e) => setNewItem(e.target.value)}
              onKeyDown={handleKeyDown}
            />
            <input
              type="text"
              placeholder="Ë©≥Á¥∞ (‰ªªÊÑè)"
              value={newItemDetail()}
              onInput={(e) => setNewItemDetail(e.target.value)}
              onKeyDown={handleKeyDown}
            />
            <button 
              onClick={handleAddTask} 
              disabled={loading()}
            >
              {loading() ? "ËøΩÂä†‰∏≠..." : "ËøΩÂä† (Cmd+Enter)"}
            </button>
            {error() && (
              <p style={{
                "color": "#e74c3c",
                "margin": "8px 0 0 0",
                "font-size": "0.9rem"
              }}>
                {error()}
              </p>
            )}
          </div>
        </div>
      )}
    </div>
  );
} 